<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'Participant': '000'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Saved data folder" updates="None" val="" valType="code"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="pix" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="black" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="Auditory_oddball" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="warning" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <SoundComponent name="stimulus">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="$Duration/1000" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="stimulus" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="A" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$randint(950,1050)/1000" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$Duration/1000" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="set every repeat" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$4*Duration/1000 + 5*randint(950,1050)/1000" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <SoundComponent name="sound_1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="$Duration/1000" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_1" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="A" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$(Duration/1000) + 2*randint(950,1050)/1000 " valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$Duration/1000" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <SoundComponent name="sound_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="$Duration/1000" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="constant" val="A" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$(2*Duration /1000) + 3*randint(950,1050)/1000" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$Duration/1000" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <SoundComponent name="sound_3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="$Duration/1000" valType="code"/>
        <Param name="hamming" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="sound_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="sound" updates="set every repeat" val="$FileName" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$3*Duration/1000 + 4*randint(950,1050)/1000" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$Duration/1000" valType="code"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
        <Param name="volume" updates="constant" val="1" valType="code"/>
      </SoundComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="$4*Duration/1000 + 5*randint(950,1050)/1000" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press the SPACE twice (once to mark the start, and the other to mark the end) of the experienced duration" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="# Each routine&amp;#10;space = False  # Has space been pushed?&amp;#10;spaceRT = ''  # variable for holding RT&amp;#10;spaceClock = clock.Clock()  # Clock for space bar&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="# Each Frame&amp;#10;keys = event.getKeys()&amp;#10;if not space and 'space' in keys:  # If space has not been pushed, reset clock when pushed&amp;#10;    space = True&amp;#10;    spaceClock.reset()&amp;#10;elif space and 'space' in keys:  # If space is pushed again, get RT&amp;#10;    spaceRT = spaceClock.getTime()&amp;#10;    space = False &amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="# End routine&amp;#10;thisExp.addData('space.rt', spaceRT)&amp;#10;&amp;#10;text_2.setText(spaceRT)&amp;#10;win.flip()" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="condition" valType="str"/>
        <Param name="startVal" updates="None" val="$key_resp.status==FINISHED" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="instruct">
      <TextComponent name="instrText">
        <Param name="color" updates="constant" val="$[1, 1, 1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="50" valType="code"/>
        <Param name="name" updates="constant" val="instrText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="OK. Ready?&amp;#10;&amp;#10;Remember: &amp;#10;1) Stay fixated on the central white dot. &amp;#10;2) Ignore the word itself; press:&amp;#10; - Left for red LETTERS&amp;#10; - Down for green LETTERS&amp;#10; - Right for blue LETTERS&amp;#10; - (Esc will quit)&amp;#10;3) To toggle gaze position visibility, press 'g'. &amp;#10;&amp;#10;Press any key to continue" valType="str"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="800" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="ready">
        <Param name="allowedKeys" updates="constant" val="" valType="code"/>
        <Param name="correctAns" updates="constant" val="thisTrial.corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="ready" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="thanks">
      <TextComponent name="thanksText">
        <Param name="color" updates="constant" val="$[1, 1, 1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="50" valType="code"/>
        <Param name="name" updates="constant" val="thanksText" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="[0, 0]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is the end of the experiment.&amp;#10;&amp;#10;Thanks!" valType="str"/>
        <Param name="units" updates="None" val="pix" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="800" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instruct"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('Duration', 825), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 2), ('FileName', './sounds/1050.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1525), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1450), ('Type', 2), ('FileName', './sounds/1450.wav')]), OrderedDict([('Duration', 900), ('Type', 2), ('FileName', './sounds/900.wav')]), OrderedDict([('Duration', 1250), ('Type', 2), ('FileName', './sounds/1250.wav')]), OrderedDict([('Duration', 1250), ('Type', 2), ('FileName', './sounds/1250.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1250), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 825), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1525), ('Type', 2), ('FileName', './sounds/1525.wav')]), OrderedDict([('Duration', 975), ('Type', 2), ('FileName', './sounds/975.wav')]), OrderedDict([('Duration', 1375), ('Type', 2), ('FileName', './sounds/1375.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 2), ('FileName', './sounds/1125.wav')]), OrderedDict([('Duration', 1050), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1375), ('Type', 2), ('FileName', './sounds/1375.wav')]), OrderedDict([('Duration', 1375), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 750), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 2), ('FileName', './sounds/1125.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1525), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1450), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 750), ('Type', 2), ('FileName', './sounds/750.wav')]), OrderedDict([('Duration', 1250), ('Type', 2), ('FileName', './sounds/1250.wav')]), OrderedDict([('Duration', 900), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 2), ('FileName', './sounds/1050.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1450), ('Type', 2), ('FileName', './sounds/1450.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 750), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 750), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 975), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1250), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 975), ('Type', 2), ('FileName', './sounds/975.wav')]), OrderedDict([('Duration', 1250), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1450), ('Type', 2), ('FileName', './sounds/1450.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 2), ('FileName', './sounds/825.wav')]), OrderedDict([('Duration', 1525), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1525), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1375), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 2), ('FileName', './sounds/1050.wav')]), OrderedDict([('Duration', 1450), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1375), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 2), ('FileName', './sounds/900.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 2), ('FileName', './sounds/825.wav')]), OrderedDict([('Duration', 1125), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1525), ('Type', 2), ('FileName', './sounds/1525.wav')]), OrderedDict([('Duration', 975), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 2), ('FileName', './sounds/825.wav')]), OrderedDict([('Duration', 975), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 825), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1050), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 900), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 1525), ('Type', 2), ('FileName', './sounds/1525.wav')]), OrderedDict([('Duration', 1125), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 975), ('Type', 2), ('FileName', './sounds/975.wav')]), OrderedDict([('Duration', 1375), ('Type', 2), ('FileName', './sounds/1375.wav')]), OrderedDict([('Duration', 1125), ('Type', 2), ('FileName', './sounds/1125.wav')]), OrderedDict([('Duration', 1250), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 975), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1450), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 750), ('Type', 0), ('FileName', './sounds/Standard tone.wav')]), OrderedDict([('Duration', 1450), ('Type', 1), ('FileName', './sounds/oddBall1.wav')]), OrderedDict([('Duration', 750), ('Type', 2), ('FileName', './sounds/750.wav')]), OrderedDict([('Duration', 900), ('Type', 2), ('FileName', './sounds/900.wav')]), OrderedDict([('Duration', 750), ('Type', 2), ('FileName', './sounds/750.wav')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditionData.csv" valType="str"/>
      <Param name="endPoints" updates="None" val="[1, 2]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
    <Routine name="thanks"/>
  </Flow>
</PsychoPy2experiment>
